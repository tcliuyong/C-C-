#include <stdio.h>
#include <stdlib.h>
/*
这段代码只所以能够判断栈的增长方向，这和调用函数时栈的使用方法是分不开的，系统在调用函数时，函数内部的局部变量会入栈（入栈顺序和函数内的变量申明顺序可能不一样， 这和编译器有一定的关系，所以不能通过一个函数内的多个变量在栈中的地址来判断栈的增长方向），这里涉及两个函数调用，第一个函数func1中申明了一个变量，然后将指向其的指针传递给函数func2，然后再在func2中申明一个变量，打印出两个变量的地址，比较地址的大小，就可知道栈的增长方向了，如果func1里的变量地址比func2里的变量地址大，则说明栈的增长方向是由高地址向低地址增长的，反之，则说明栈的增长方向是由低地址向高地址增长的，以上程序要我的机器上运行的结果如下（程序在不同时刻运行，会有不同的输出，所以大家运行的结果会和下面的结果不同，不过这没有关系，大家只要比较两个输出值的大小，就能进行方向判定了）：
*/ 
void func1();
void func2(int *a);


int main(int argc, char** argv) {
    func1();
    return (EXIT_SUCCESS);
}

void func1(){
    int a = 0;
    func2(&a);
}
void func2(int *a){
    int b = 0;
    printf("%x\n%x\n",a,&b);
}